/**
 * Type definitions for Slack API responses and data structures
 * 
 * This file contains the core TypeScript interfaces used throughout the Slack MCP server.
 * Types are organized by functional domain for better maintainability.
 */

// ===================================================================
// CORE MESSAGE TYPES
// ===================================================================

/**
 * Represents a message in a Slack channel or thread
 */
export interface SlackMessage {
  type: string;
  user?: string;
  text?: string;
  ts: string;
  thread_ts?: string;
  edited?: {
    user: string;
    ts: string;
  };
  bot_id?: string;
  app_id?: string;
  username?: string;
  blocks?: SlackBlock[];
  attachments?: SlackAttachment[];
  reactions?: SlackReaction[];
}

/**
 * Represents a Slack Block Kit block element
 */
export interface SlackBlock {
  type: string;
  block_id?: string;
  text?: {
    type: string;
    text: string;
    emoji?: boolean;
  };
  accessory?: unknown;
  fields?: unknown[];
  elements?: unknown[];
}

/**
 * Represents a message attachment
 */
export interface SlackAttachment {
  color?: string;
  fallback?: string;
  id: number;
  author_icon?: string;
  author_link?: string;
  author_name?: string;
  fields?: SlackAttachmentField[];
  footer?: string;
  footer_icon?: string;
  image_url?: string;
  pretext?: string;
  text?: string;
  thumb_url?: string;
  title?: string;
  title_link?: string;
  ts?: number;
}

/**
 * Represents a field within a message attachment
 */
export interface SlackAttachmentField {
  title: string;
  value: string;
  short: boolean;
}

/**
 * Represents an emoji reaction on a message
 */
export interface SlackReaction {
  name: string;
  users: string[];
  count: number;
}

// ===================================================================
// USER TYPES
// ===================================================================

/**
 * Represents a Slack user
 */
export interface SlackUser {
  id: string;
  team_id: string;
  name: string;
  deleted: boolean;
  color: string;
  real_name: string;
  tz: string;
  tz_label: string;
  tz_offset: number;
  profile: SlackUserProfile;
  is_admin: boolean;
  is_owner: boolean;
  is_primary_owner: boolean;
  is_restricted: boolean;
  is_ultra_restricted: boolean;
  is_bot: boolean;
  is_app_user: boolean;
  updated: number;
  is_email_confirmed: boolean;
  who_can_share_contact_card: string;
}

/**
 * Represents a Slack user's profile information
 */
export interface SlackUserProfile {
  avatar_hash: string;
  status_text: string;
  status_emoji: string;
  real_name: string;
  display_name: string;
  real_name_normalized: string;
  display_name_normalized: string;
  email?: string;
  image_original?: string;
  image_24: string;
  image_32: string;
  image_48: string;
  image_72: string;
  image_192: string;
  image_512: string;
  team: string;
}

// ===================================================================
// CHANNEL TYPES
// ===================================================================

/**
 * Represents a Slack channel
 */
export interface SlackChannel {
  id: string;
  name: string;
  is_channel: boolean;
  is_group: boolean;
  is_im: boolean;
  is_private: boolean;
  created: number;
  creator: string;
  is_archived: boolean;
  is_general: boolean;
  unlinked: number;
  name_normalized: string;
  is_shared: boolean;
  is_ext_shared: boolean;
  is_org_shared: boolean;
  pending_shared: string[];
  pending_connected_team_ids: string[];
  is_pending_ext_shared: boolean;
  is_member: boolean;
  is_open: boolean;
  last_read: string;
  latest: SlackMessage;
  unread_count: number;
  unread_count_display: number;
  topic: {
    value: string;
    creator: string;
    last_set: number;
  };
  purpose: {
    value: string;
    creator: string;
    last_set: number;
  };
  num_members?: number;
}

// ===================================================================
// THREAD TYPES
// ===================================================================

/**
 * Represents a complete Slack thread with its messages
 */
export interface SlackThread {
  parent_message: SlackMessage;
  replies: SlackMessage[];
  reply_count: number;
  reply_users: string[];
  reply_users_count: number;
  latest_reply: string;
  thread_ts: string;
  channel_id: string;
}

/**
 * Represents detailed analysis results for a thread
 */
export interface ThreadAnalysis {
  thread_ts: string;
  channel_id: string;
  participants: ThreadParticipant[];
  timeline: ThreadTimelineEvent[];
  key_topics: string[];
  urgency_score: number;
  importance_score: number;
  sentiment: 'positive' | 'neutral' | 'negative';
  action_items: ActionItem[];
  summary: string;
  word_count: number;
  duration_hours: number;
}

/**
 * Represents a participant in a thread
 */
export interface ThreadParticipant {
  user_id: string;
  username: string;
  real_name?: string;
  message_count: number;
  first_message_ts: string;
  last_message_ts: string;
  avg_response_time_minutes?: number;
}

/**
 * Represents an event in a thread's timeline
 */
export interface ThreadTimelineEvent {
  timestamp: string;
  user_id: string;
  event_type: 'message' | 'reaction' | 'edit' | 'delete';
  content?: string;
  reaction_name?: string;
}

/**
 * Represents an action item extracted from a thread
 */
export interface ActionItem {
  text: string;
  mentioned_users: string[];
  due_date?: string;
  priority: 'low' | 'medium' | 'high';
  status: 'open' | 'in_progress' | 'completed';
  extracted_from_message_ts: string;
}

/**
 * Represents a high-level summary of a thread
 */
export interface ThreadSummary {
  thread_ts: string;
  channel_id: string;
  title: string;
  brief_summary: string;
  key_points: string[];
  decisions_made: string[];
  action_items: ActionItem[];
  participants: string[];
  message_count: number;
  duration: string;
  status: 'active' | 'resolved' | 'stale';
}

/**
 * Represents metrics about threads in a workspace
 */
export interface ThreadMetrics {
  total_threads: number;
  active_threads: number;
  resolved_threads: number;
  stale_threads: number;
  avg_messages_per_thread: number;
  avg_participants_per_thread: number;
  avg_duration_hours: number;
  top_participants: { user_id: string; thread_count: number }[];
  busiest_channels: { channel_id: string; thread_count: number }[];
  thread_activity_by_hour: { hour: number; thread_count: number }[];
}

// ===================================================================
// FILE TYPES
// ===================================================================

/**
 * Represents a file uploaded to Slack
 */
export interface SlackFile {
  id: string;
  created: number;
  timestamp: number;
  name: string;
  title: string;
  mimetype: string;
  filetype: string;
  pretty_type: string;
  user: string;
  username: string;
  size: number;
  mode: string;
  is_external: boolean;
  external_type: string;
  is_public: boolean;
  public_url_shared: boolean;
  display_as_bot: boolean;
  url_private: string;
  url_private_download: string;
  permalink: string;
  permalink_public?: string;
  edit_link?: string;
  preview?: string;
  preview_highlight?: string;
  lines?: number;
  lines_more?: number;
  is_starred: boolean;
  shares?: {
    public?: { [channel: string]: SlackFileShare[] };
    private?: { [channel: string]: SlackFileShare[] };
  };
  channels?: string[];
  groups?: string[];
  ims?: string[];
  has_rich_preview: boolean;
  file_access: string;
  comments_count: number;
  initial_comment?: SlackFileComment;
  num_stars?: number;
  is_tombstoned?: boolean;
}

/**
 * Represents sharing information for a file
 */
export interface SlackFileShare {
  reply_users?: string[];
  reply_users_count?: number;
  reply_count?: number;
  ts: string;
  channel_name: string;
  team_id: string;
}

/**
 * Represents a comment on a file
 */
export interface SlackFileComment {
  id: string;
  created: number;
  timestamp: number;
  user: string;
  comment: string;
}

/**
 * Represents analysis results for files in a workspace
 */
export interface FileAnalysis {
  total_files: number;
  total_size_bytes: number;
  by_type: { [filetype: string]: { count: number; size_bytes: number } };
  by_user: { [user: string]: { count: number; size_bytes: number } };
  by_channel: { [channel: string]: { count: number; size_bytes: number } };
  large_files: SlackFile[];
  old_files: SlackFile[];
  recent_activity: { date: string; uploads: number; size_bytes: number }[];
}